可以在数字前加#表示十进制数

AOB(Array Of Bytes)注入即特征码注入，找具有唯一性的地址进行注入

编写汇编代码注意保持堆栈平衡,否则容易爆栈导致崩溃

CE可以在选项内开启显示所有窗口在任务栏

DBVM (Dark Byte Virtual Machine),将C放入一种虚拟机环境中，将其转为R0级权限，CE里面可以在CE的帮助――关于CE中左下角检测是否支持DBVM,不支持容易蓝屏，可用winver判断版本，一般win7都可用，新版本win10不一定，CE7.1支持所有系统

开启后会在进程中可以选择物理内存，可以调试汇编程序

有的游戏驱动级别保护，开启DBVM检测驱动名字dbk32，可又改不了名字（CE有签名），CE内有driver（64）.dat，进入其中可以改变其名字(CE程序的名字也可以更改)，从而骗过检测

编译CE可以由其源码搭配WinDK7（Windows Driver Kids，Windows驱动组件）在文件夹下的Build Environment下选择队友版本，找到checked build environment（注意32还是64位），然后进入CE的DBKKernel源码路径，运行ce.bat，会显示生成路径，里面有新的dbk文件
再用ce自带的kernelmoduleunloader将自己驱动卸载掉，要转到windows测试模式才能加载(在这种模式下可以运行非官方或无数字签名的驱动程序 。)

DBVM只能用于intel上，Ultimap功能只能用于开启了DBVM且为intel的机子上（因为两种CPU架构不一样），而Ultimap2可以用于AMD，注意，使用它查找所有函数将会让电脑非常卡！但可以用于分析游戏是否过场，是否触发什么等模糊的操作，位于内存查看器――工具下

右侧是过滤器，可以先运行一会，然后点击右侧“代码没有运行”将没有的主程序记录下来，再执行你想要的操作，然后点击“代码已经运行”，然后选择“非特定模块下过滤例程”，然后选择过滤的主程序（可以选择倒数第二个选项只运行了多少次来进行筛选，比如攻击了2次），（最后可以再选第三项将未运行的都过滤掉）（第一个选项是指从来没有被运行过，这个选项是指最近一次没被运行过），点击show matching routines显示最后的结果

显示的函数地址可以直接双击转到改位置，同时后面也有运行结束的位置

透视原理，将z轴坐标变0，z轴（不同游戏有差异）代表上下、深度，深度为0就可以直接出现在眼前
一个物体有两种坐标，一个世界坐标（空间），一个平面坐标（屏幕），如U3D中有个函数WorldToScreemPoint转化世界坐标为屏幕坐标
会产生一个4x4或4x3矩阵，第四列前三个为空间坐标，剩下的都在[-1,1]中，可以通过矩阵变换转化屏幕坐标并绘制。U3D用GL库（4x4），DX内用摄像机矩阵（DX投影矩阵）（4x3）

内置挂绘制是内部的（internal）,需要hook，又或者覆盖的（overlay）绘制一个透明框覆盖在屏幕上

找坐标：一般向上则z轴加，向下则z轴减，可以搭配热键多次搜索（注意：镜头坐标和人物坐标不一定相同，对方在你屏幕的坐标要分开），然后浏览相关内存区域，将下面显示（在右键――显示数值下）改为浮点数，观察有几个坐标，查找是什么访问了该地址，将访问次数最多的操作右侧（一般是传入的）地址，比如[esi+xx]，进行搜索esi（指向它的也行）结构（因为一个角色一般对应一个结构）可以看到相关数据

数据计算结果如果超过屏幕分辨率，一般都不是。

编写代码时注意每个结构的大小，进行遍历，要找一个判断玩家是否存在的数值来判断遍历次数。注意绘图时若为 60fps，则一秒要绘制60次，会导致游戏很卡。一般人物有两个高度，一个是顶部，一个是底部，可以算出要绘制的框的大小（一般可以让宽度为高度的一半，则绘制原点在x-y/2,y即左上角）

修改速度一般可以通过是更改位移变化的值来实现,要注意浮点数的16进制数与一般整数不一样