举例说明
//字节 8Bit
-7
原码	10000111
反码	11111000
补码	11111001 //F9

可以通过原码判断具体数字，然而存储都是使用补码


窍门

假设数据宽度为1byte（8bit）

无符号数： 1 2 3……FF（255）
有符号数：正数 0……7F
	  负数 FF……80
 
	80 | 7F
      __/--|--\__  
     /	   |	\
    /	   |	 \
BF /	   |	  \	40
――――――――――――
C0 \	   |	  /	3F
    \	   |	 /
     \	   | 	/
      ―\--|--/―
	 FF|0

7F   127
80   -128
这里+1后同时因为符号位改变导致变成负数




同样，若有一双字节数（DW，32bit）
无符号数： 1 2 3……FFFFFFFF
有符号数：正数 0……7FFFFFFF（21亿多）
	  负数 FF……80000000 
 
		 80000000 | 7FFFFFFF
  	 	     __/--|--\__  
  	 	    /	  |	\
	 	   /	  |	 \
BFFFFFFF	  /	  |	  \	40000000
		――――――――――――
C0000000	  \	  |	  /	3FFFFFFF
  		   \	  |	 /
  	 	    \	  | 	/
   	 	     ―\--|--/―
		FFFFFFFF  |00000000