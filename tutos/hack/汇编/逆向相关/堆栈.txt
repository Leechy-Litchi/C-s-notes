堆栈是由系统先分配好的一块内存
一般都在0018D000 ~ 00190000
而指令大致如下

7EFDD004  00190000  栈顶
7EFDD008  0018D000  栈底

存放数据是由顶压到底（高位压到低位）
在OD中是这样显示的

[]    				  0018D000
[]  
[]
……
[]
[1] 压入第一个			  0018FFFC（一般不满00190000减一字节的就不算到满）


[]  
[]  
[]
……
[2] 压入第二个
[1] 第一个数据



ESP是栈顶指针，最开始指向大地址（栈顶）
然后如果有压入新的数据，那么存放的地址就是当前占用到的地址（最后一个数据的地址）
而它之后的地址可以用来储存其它数据


不过要注意，当你在ESP地址后面一点的位置存储数据时，
新压入的数据可能会让前面的数据覆盖你存储的数据
比如
[]  
[]  
[123]      你存储的数据 
[312]      你存储的数据 
[5]        ESP指向的地址，存放的是第一个入栈的数据
[4]  
[3] 
[2]  
[1]

再push（入栈）一个数据时

[]  
[]  
[123]      
[6]        数据被覆盖，ESP指向此处
[5]        
[4]  
[3] 
[2]  
[1]

所谓的临时变量或者说局部变量会“消失”就是这个原理
你放入的临时变量就在ESP不远处，让你计算完后，
入栈的数据直接覆盖，或因为栈恢复场面导致数据消失

恢复场面
当你进行计算后，你的栈指针已经移动很远了，
你想要再一次运算时地址又要改变，
所以有了这个操作，将栈指针减少你存储的数据量
比如你计算时有3个DWORD变量
最开始ESP是00001000（假设）
然后压入3个数据
ESP变成00000FF4
然后恢复场面就是
ADD ESP，0000000C
让它便会00001000

同理，让它跳过你存储的数据，就是ADD ESP，XXXX
指针也是同理，通过减ESP大小来指向后一个数据，
通过加ESP大小指向前一个数据
比如列表和链表
一个列表b = [0,1,2,3,\0]
结构
[\0]  ESP
[3]
[2]
[1]
[0]

ESP + 4
[\0]  
[3]  ESP
[2]
[1]
[0]

ESP - 4
[\0]  ESP
[3]
[2]
[1]
[0]

