Haskell Curry 命名的
节省无意义或重复的参数传递
让你的函数返回一个新的函数，这个函数能够接收剩下的函数
可以将具有多个参数的函数转换为单参数函数链

比如说
function print(company, department, name, age) {
    console.log(`我是 ${company} ${department} 部门的 ${name}，${age} 岁`);
    }
    print('ali', 'F77', 'zhangsan', 20);
    print('ali', 'F77', 'lisi', 30);
对于“公司”和“部门”，都是一样的，就没必要都作为参数传递


柯里化
function curry(company, department) { //接收固定的公司、部门
  return function (name, age) {
    console.log(`我是 ${company} ${department} 部门的 ${name}，${age} 岁`);
  }
}
let print = curry('ali', 'F77'); // 传递固定的公司、部门
 print('zhangsan', 20);//调用 return 出来的函数并传变化的参数
print('lisi', 30);



https://zhuanlan.zhihu.com/p/414914066


常用高阶函数

    1.forEach()

arr.forEach(item =>{
    if(item > 3){
        console.log(item); 
    }
});

    2.map()

const names = users.map(user => user.name);

    3.Filter()

const filtered = arr.filter(item => item < 3);

    4.reduce()

const sumOfAges = users.reduce((sum, user) => sum + user.age, 0);

    5.sort()

points.sort(function(a, b){
    return a-b
});
points.sort((a,b)=> b - a); 

    6.every()

numbers.every(function(currentValue) { 
    return currentValue < 10;
});// return true or false

    7.some()

numbers.some(function(currentValue) { 
    return currentValue < 10;
});// returns true or false

以上皆传递了函数作为参数

实现
function curried(fn,...args){
	if(args.length>=fn.length){
		return fn(...args)
	}
}
return function(...args){
	return curried(fn,...args,...args2)
}

