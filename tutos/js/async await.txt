https://www.bilibili.com/video/BV1tZ4y1Q7Zh
promise的语法糖，async返回的是Promise.resolve();
但如果无返回值则是空的

所以可以用then
bb().then(value=>{
	console.log(value);
})


await在async函数内进行等待

async function a{
	fa();
	let b = await Promise.resolve(xxx);
	fb();
	return Promise.resolve("ok");
}

如果用then调用，结果大致如下
fa的输出
xxx
fb的输出
ok


这两个语法糖目的是优化fetch的语法
一般fetch
fetch(`${url}/1/`)
  .then(response => response.json())
  .then(json => json.data)
  .then(data => console.log(data.name));
但是这会异步返回，于是用await进行顺序返回



async支持箭头函数
let a = async ()=>{
    try{ 
	let res1 = await fetch(url);
	let json1 = await res1.json();
	let name1 = await json1.data.name;
	//res2、res3
	//但是会发现，这里每次请求都要等前面完整过程，所以可以用Promise.all

	let ress = await Promise.all(
	    [fetch(url1),fetch(url2)]//如果其中一个出错则直接返回错误
);
	let jsons = ress.map(res=>res.json());//注意，调用json后还是返回Promise，所以还要一次all并用await确定全部处理完毕
	let values = await Promise.all(jsons);
	values.map(value=>console.log(value.data.name));
    }catch(e){xxx}
}