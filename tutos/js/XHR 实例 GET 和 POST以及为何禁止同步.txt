https://blog.csdn.net/alex8046/article/details/51909555
创建个XHR对象的实例：
var xhr = function(){
    if (window.XMLHttpRequest) {
        return new XMLHttpRequest();
    }else{
        return new ActiveObject('Micrsorf.XMLHttp');
    }
}();
console.log(xhr.readyState);


get请求
xhr.onreadystatechange = function(){
    switch(xhr.readyState){
        case 0 : 
            console.log(0,'未初始化....');
            break;
        case 1 : 
            console.log(1,'请求参数已准备，尚未发送请求...');
            break;
        case 2 : 
            console.log(2,'已经发送请求,尚未接收响应');
            break;
        case 3 : 
            console.log(3,'正在接受部分响应.....');
            data.innerHTML = xhr.responseText;
            break;
        case 4 : 
            console.log(4,'响应全部接受完毕');
            if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304) {
                document.write(xhr.responseText);
            }else{
                document.write('error:' + xhr.status);
            }
            break;
    }
}
xhr.open('get','/products/getProduct?id=1');
xhr.send(null);

刚创建XHR对象后readyState为0，然后接着执行后面的代码，直到send()方法之前readyState的值都没有发生改变，所以在onreadystatechange事件中检测readyState为0是没有意义的

为3是触发了两次，其实有些请求不止两次，看你请求的数据量的大小而定

可以利用这个特性在readystate为3时做一个数据加载进度条变化的效果

get请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分割URL和传输数据，参数之间以&相连，如：'/products/getProduct?id=1'。如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如：%E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII。



POST把提交的数据则放置在是HTTP包的包体中。
    var data =encodeFormData({
        tel : tel,
        pwd : pwd
    }) ;
xhr.open(url)
xhr.setRequestHeader('Content-Type','application/x-www-form-urlencoded')
xhr.send(data);
HTTP POST请求包含一个请求主体，它包含了客户端发送给服务器的数据


当这个表单数据的比叫多而复杂时，再以这种字符串拼接的方式传递的话比较容易出错，不好维护，所以我们需要封装一个这样的方法帮助我们将我们的数据拼接成这样的格式：

    function encodeFormData(data){
        if(!data) return '';
        var pairs = [];
        for(var name in data){
            if(!data.hasOwnProperty(name)) continue;
            if(typeof data[name] === 'function') continue;
            var value = data[name].toString();
            name = encodeURIComponent(name.replace('%20','+'));
            value = encodeURIComponent(value.replace('%20','+'));
            pairs.push(name+'='+value);
        }
        return pairs.join('&');
    }


get请求：

    GET 请求可被缓存
    GET 请求保留在浏览器历史记录中
    GET 请求可被收藏为书签
    GET 请求不应在处理敏感数据时使用
    GET 请求有长度限制
    GET 请求只应当用于取回数据

post请求：

    POST 请求不会被缓存
    POST 请求不会保留在浏览器历史记录中
    POST 不能被收藏为书签
    POST 请求对数据长度没有要求



XHR禁止同步！

如果我们发起一个同步请求，chrome浏览器会给你这样一个警告：Synchronous XMLHttpRequest on the main thread is deprecated because of its detrimental effects to the end user's experience. For more help, check http://xhr.spec.whatwg.org/. 
意思就是同步请求不利于用户体验。