有些信息在存储时，并不需要占用一个完整的字节， 而只需占几个或一个二进制位。例如在存放一个开关量时，只有0和1 两种状态， 用一位二进位即可。为了节省存储空间，并使处理简便，C语言又提供了一种数据结构，称为“位域”或“位段”。所谓“位域”是把一个字节中的二进位划分为几个不同的区域，并说明每个区域的位数。每个域有一个域名，允许在程序中按域名进行操作。这样就可以把几个不同的对象用一个字节的二进制位域来表示。

 

一、位域的定义和位域变量的说明位域定义与结构定义相仿，其形式为： 
struct 位域结构名 
{ 位域列表 }; 
其中位域列表的形式为： 类型说明符 位域名：位域长度 


例如： 
struct bs 
{ 
int a:8; 
int b:2; 
int c:6; 
}; 
位域变量的说明与结构变量说明的方式相同。 可采用先定义后说明，同时定义说明或者直接说明这三种方式。例如： 
struct bs 
{ 
int a:8; 
int b:2; 
int c:6; 
}data; 
说明data为bs变量，共占两个字节（这里假定int类型长度为16位，通常int都是32位）。其中位域a占8位，位域b占2位，位域c占6位。

 

对于位域的定义尚有以下几点说明： 
1. 一个位域必须存储在同一个单元中，不能跨两个单元。如一个单元所剩空间不够存放另一位域时，应从下一单元起存放该位域。也可以有意使某位域从下一单元开始。例如： 
struct bs 
{ 
unsigned a:4 
unsigned :0  
unsigned b:4  
unsigned c:4 
} 
这个位域定义中，a占第一字节的4位，后4位填0表示不使用，b从第二字节开始，占用4位，c占用4位。 
2. 位域可以无位域名，这时它只用来作填充或调整位置。无名的位域是不能使用的。例如： 
struct k 
{ 
int a:1 
int :2  
int b:3 
int c:2 
}; 


从以上分析可以看出，位域在本质上就是一种结构类型， 不过其成员是按二进位分配的。
简而言之，言而简之
这是位域操作的表示方法，也就是说后面加上“：1”的意思是这个成员的大小占所定义类型的1 bit，“：2”占2 bit，依次类推。当然大小不能超过所定义类型包含的总bit数。 
一个bytes(字节)是8 bit(bit)。例如你的结构中定义的类型是u_char，一个字节，共8bit，最大就不能超过8。 
32位机下， 
short是2字节，共16bit，最大就不能超过16. 
int是4字节，共32bit，最大就不能超过32. 
依次类推。 
这样定义比较省空间。例如你上面的结构，定义的变量类型是u_char，是一字节类型，即8bit。 
fc_subtype占了4bit，fc_type占2bit,fc_protocol_version占2bit，共8bit，正好是一个字节。 
其他八个成员,各占1bit，共8bit，正好也是一个字节。 
因此你的结构的大小如果用sizeof（struct frame_control）计算，就是2bytes.
