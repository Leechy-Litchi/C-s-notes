CREATE DATABASE 数据库名;

可以使用
CREATE DATABASE IF NOT EXISTS RUNOOB DEFAULT CHARSET utf8 COLLATE utf8_general_ci;

该命令的作用：
    1. 如果数据库不存在则创建，存在则不创建。
    2. 创建RUNOOB数据库，并设定编码集为utf8

CREATE TABLE IF NOT EXISTS `runoob_tbl`(
   `runoob_id` INT UNSIGNED AUTO_INCREMENT,
   `runoob_title` VARCHAR(100) NOT NULL,
   `runoob_author` VARCHAR(40) NOT NULL,
   `submission_date` DATE,
   PRIMARY KEY ( `runoob_id` )
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

AUTO_INCREMENT定义列为自增的属性，一般用于主键，数值会自动加1。
PRIMARY KEY关键字用于定义列为主键。 您可以使用多列来定义主键，列间以逗号分隔。
ENGINE 设置存储引擎，CHARSET 设置编码。


空值 "" 和 NULL 的概念：
    1）空值是不占用空间的
    2）MySQL中的NULL其实是占用空间的

1.所谓的 NULL 就是什么都没有，连 \0 都没有，\0 在字符串中是结束符，但是在物理内存是占空间的，等于一个字节，而 NULL 就是连这一个字节都没有。
2、其次，在数据库里是严格区分的，任何数跟 NULL 进行运算都是 NULL, 判断值是否等于 NULL，不能简单用 =，而要用 IS NULL关键字。
3、数据库的字段 col1 设为 NOT NULL, 仅仅说明该字段不能为 NULL, 也就是说只有在:
INSERT INTO table1(col1) VALUES(NULL);
这种情况下数据库会报错，而:
INSERT INTO table1(col1) VALUES('');
不会报错。
4、含有空值的列很难进行查询优化，索引时不会存储 NULL 值的，所以索引的字段为 NULL时，索引的效率会下降很多。因为它们使得索引、索引的统计信息以及比较运算更加复杂。应该用 0、一个特殊的值或者一个空串代替空值。
5、联表查询时若没有记录，则查找出的字段都是 null。



drop database <数据库名>;
delete * from *

删除表内数据，用 delete。格式为：
delete from 表名 where 删除条件;

清除表内数据，保存表结构，用 truncate。格式为：
truncate table 表名;

删除表用 drop，格式为：

drop  table  表名;

1、当你不再需要该表时， 用 drop;
2、当你仍要保留该表，但要删除所有记录时， 用 truncate;
3、当你要删除部分记录时， 用 delete。

delete from table_name where xxx : 带条件的删除





INSERT INTO table_name ( field1, field2,...fieldN )
                       VALUES
                       ( value1, value2,...valueN );
NSERT 插入多条数据
INSERT INTO table_name  (field1, field2,...fieldN)  VALUES  (valueA1,valueA2,...valueAN),(valueB1,valueB2,...valueBN),(valueC1,valueC2,...valueCN)......;


INSERT INTO runoob_tbl
     (runoob_title, runoob_author, submission_date)
     VALUES
     ("学习 MySQL", "菜鸟教程", NOW());




select * from runoob_tbl;

查询成绩不等于 66.6 的学生
SELECT * FROM student WHERE stu_score != 66.6;
SELECT * FROM student WHERE stu_score <> 66.6;

-- 查询哪些学生成绩字段为 NULL
SELECT * FROM student WHERE stu_score IS NULL;	
-- 查询哪些学生成绩字段不为 NULL
SELECT * FROM student WHERE stu_score IS NOT NULL;	
-- 这是一种错误的写法，NULL的判断是不能用等号的
SELECT * FROM student WHERE stu_score = NULL; (错误!!!)

查询成绩大于等于60小于80的学生（成绩良好）
SELECT * FROM student WHERE stu_score >=60.0 AND stu_score <= 80.0;	
SELECT * FROM student WHERE stu_score >=60.0 && stu_score <= 80.0;	
SELECT * FROM student WHERE stu_score BETWEEN 60.0 AND 80.0;	

查询成绩为 40.0 ，90.8 的学生，下面三种查出来结果是一样的
SELECT * FROM student WHERE stu_score = 40.0 OR stu_score = 90.8;	
SELECT * FROM student WHERE stu_score = 40.0 || stu_score = 90.8;	
SELECT * FROM student WHERE stu_score IN (40.0,90.8);

模糊查询：查询姓张的学生有哪些
SELECT * FROM student WHERE stu_name LIKE '张%';

模糊查询：查询姓名中第二个字为四的学生
SELECT * FROM student WHERE stu_name LIKE '_四%';

模糊查询：查询姓名长度为 4 个字的学生（四个_ ）
SELECT * FROM student WHERE stu_name LIKE '____';

模糊查询：查询姓名中含有五这个字的学生
SELECT * FROM student WHERE stu_name LIKE '%五%';


    按成绩从高到低排序查询（降序）
SELECT * FROM student ORDER BY stu_score DESC; 
--DESC降序，ASC升序


GROUP BY 分组字段
    按照年龄分组，分别查询年龄为18岁以及20岁同学的平均分，以及人数， 同时要求：不及格的同学，不计入分组
SELECT stu_age, AVG(stu_score), COUNT(stu_id) FROM student WHERE stu_score > 60 GROUP BY stu_age;
说明：AVG 方法是求平均值的，COUNT 方法是求个数的



WHERE 和 HAVING 有什么区别呢？

    WHERE 在分组之前进行限定，不满足则不分组
    HAVING在分组之后进行限定，不满足则查不到
    WHERE 后不可以跟聚合函数，HAVING 可以进行聚合函数的判断，例如 AVG 方法、COUNT 方法都是聚合函数
EXP：SELECT stu_age, AVG(stu_score), COUNT(stu_id) FROM student WHERE stu_score > 60 GROUP BY stu_age HAVING COUNT(stu_id) > 2;
聚合函数补充：

聚合函数：将一列数据作为一个整体，进行纵向的计算，尽量选择不为空的列进行计算，否则就需要使用 IFNULL 函数进行判断
COUNT：计算个数 -- 一般选择非空的列：主键
MAX：计算最大值
MIN：计算最小值
SUM：计算和
AVG：计算平均值


    每页显示 2 条数据
SELECT * FROM student LIMIT 0,2; -- 第1页
SELECT * FROM student LIMIT 2,2; -- 第2页
SELECT * FROM student LIMIT 4,2; -- 第3页
SELECT * FROM student LIMIT 6,2; -- 第4页




UPDATE 表名 SET 列名1 = 值1, 列名2 = 值2,... [WHERE 条件];
例 1：修改学号为 1001 学生的 出生日期和成绩
UPDATE student SET stu_birthday = '2020-02-22', stu_score = 90.8 WHERE stu_id = 1001;
