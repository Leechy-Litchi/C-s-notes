X.concat(X)
将元组结合
var hege = ["Cecilie", "Lone"];
var stale = ["Emil", "Tobias", "Linus"];
var children = hege.concat(stale);
一道面试题：传递两个参数m，n，返回长度为m，所有元素都为n的数组，要求不能用循环。
利用函数的递归和 concat() 方法可以实现，代码如下：
function fn(m, n) {
  return m ? fn(m - 1, n).concat(n) : [];
}


copyWithin
复制元素
array.copyWithin(target, start, end)
参数 	描述
target 	必需。复制到指定目标索引位置。
start 	可选。元素复制的起始位置。
end 	可选。停止复制的索引位置 (默认为 array.length)。如果为负值，表示倒数。

复制数组的前面两个元素到后面两个元素上：
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.copyWithin(2, 0);

fruits 输出结果：
Banana,Orange,Banana,Orange

复制数组的前面两个元素到第三和第四个位置上：
var fruits = ["Banana", "Orange", "Apple", "Mango", "Kiwi", "Papaya"];
fruits.copyWithin(2, 0, 2);
//可见这里的复制是先剪切了的，所以0已经是第三位了
输出结果：
Banana,Orange,Banana,Orange,Kiwi,Papaya 


entries
创建一个可迭代对象， 该对象包含了数组的键值对
var fruits = ["Banana", "Orange", "Apple", "Mango"];
var x = fruits.entries();

document.getElementById("demo1").innerHTML = x.next().value;
document.getElementById("demo2").innerHTML = x.next().value;
输出两个
如果不设x，直接fruits.entries()
会全部输出

every
对每个元素进行判断，一个不成功就返回false
var ages = [32, 33, 16, 40];
function checkAdult(age) {
    return age >= 18;
}
function myFunction() {
    document.getElementById("demo").innerHTML = ages.every(checkAdult);
}


fill
使用固定值填充数组：
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.fill("Runoob");
输出 Runoob,Runoob,Runoob,Runoob 

填充 "Runoob" 到数组的最后两个元素：
var fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.fill("Runoob", 2, 4);
输出结果：
Banana,Orange,Runoob,Runoob 


find
获取
find() 方法为数组中的每个元素都调用一次函数执行：
当数组中的元素在测试条件时返回 true 时, find() 返回符合条件的元素，之后的值不会再调用执行函数。
如果没有符合条件的元素返回 undefined
注意: find() 对于空数组，函数是不会执行的。
()内需要是函数名，函数不需要()，自动导入前面的数组
例子：age.find(xxx)

获取数组中年龄大于 18 的第一个元素
var ages = [3, 10, 18, 20];
function checkAdult(age) {
    return age >= 18;
}
function myFunction() {
    document.getElementById("demo").innerHTML = ages.find(checkAdult);
}

返回符合大于输入框中数字的数组索引值：
<p>最小年龄: <input type="number" id="ageToCheck" value="18"></p>
var ages = [4, 12, 16, 20];
function checkAdult(age) {
    return age >= document.getElementById("ageToCheck").value;
} 
function myFunction() {
    document.getElementById("demo").innerHTML = ages.find(checkAdult);
}

返回符合大于输入框中指定数字的数组元素（只有一个数）
var ages = [4, 12, 16, 20];
function checkAdult(age) {
    return age >= document.getElementById("ageToCheck").value;
}
function myFunction() {
    document.getElementById("demo").innerHTML = ages.find(checkAdult);
}


filter
filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素
与find区别在于find改变了原本的数组，相当于筛选，filter是选取符合条件的数创建新的数组
注意： filter() 不会对空数组进行检测。
语法
array.filter(function(currentValue,index,arr), thisValue)
currentValue 	必须。当前元素的值
index 	可选。当前元素的索引值
arr 	可选。当前元素属于的数组对象
thisValue 	可选。对象作为该执行回调时使用，传递给函数，用作 "this" 的值。
如果省略了 thisValue ，"this" 的值为 "undefined"


var ages = [32, 33, 16, 40];
function checkAdult(age) {
    return age >= 18;
}
function myFunction() {
    document.getElementById("demo").innerHTML = ages.filter(checkAdult);
}

返回数组 ages 中所有元素都大于输入框指定数值的元素（全部大于的数）
var ages = [32, 33, 12, 40];
function checkAdult(age) {
    return age >= document.getElementById("ageToCheck").value;
}
function myFunction() {
    document.getElementById("demo").innerHTML = ages.filter(checkAdult);
}



findIndex
查找符合的索引（可以快速知道是第几项）
var ages = [4, 12, 16, 20];

function checkAdult(age) {
    return age >= document.getElementById("ageToCheck").value;
}

function myFunction() {
    document.getElementById("demo").innerHTML = ages.findIndex(checkAdult);
}