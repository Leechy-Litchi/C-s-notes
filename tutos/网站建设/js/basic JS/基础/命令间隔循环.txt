/*尽量不用setInterval()
原因一、setInterval()无视代码错误
setInterval对自己调用的代码是否报错不关心。如果setInterval执行的代码出了错，还会持续不断（不管不顾）地调用该代码。
原因二、setInterval无视网络延迟
每隔一段时间就通过Ajax轮询一次服务器，看有没有新数据（注意：如果你真的这么做了，那恐怕你做错了；建议使用“补偿性轮询”（backoff polling））。由于某些原因（服务器过载、临时断网、流量剧增、用户带宽受限，等等），请求要花的时间远比你想象的要长。但setInterval仍然会按定时持续不断地触发请求，最终你的客户端网络队列会塞满Ajax调用。
原因三、setInterval不保证执行
与setTimeout不同，并不能保证到了时间间隔，代码准能执行。如果用的函数需要很长时间才能完成，那某些调用会被直接忽略。
区别：setTimeout()只执行一次，而setInterval可以多次调用。*/
<html>
<body>

<input type="text" id="clock" size="35" />
<script language=javascript>
var int=self.setInterval("clock()",50)
function clock()
  {
  var t=new Date()
  document.getElementById("clock").value=t
  }
</script>
<button onclick="int=window.clearInterval(int)">Stop interval</button>

</body>
</html>


