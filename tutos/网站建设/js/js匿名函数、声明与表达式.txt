https://blog.csdn.net/qq_30638831/article/details/88628421
函数的声明
关于函数声明，它最重要的一个特征就是函数声明提升，意思是执行代码之前先读取函数声明。不管函数声明写在前面，还是后面，都会出现函数声明的提升。
如下代码可以正确执行：

add(1,2); //弹窗显示：3  
function add(x,y){  
    alert(x+y) 
}  

变量提升，这里可以说是function变量的提升，如果是调用后面var的值就是标准的变量提升（按第一个var的，如果前面有赋值也不算，后面var也不算）

函数表达式
函数表达式在使用前必须先赋值。所以这段代码执行的时候就会出错：

add(1,2) //无弹窗，报错： add is not a function  
var add = function(x,y){  
    alert(x+y)  
} 

    对第一种情况, 函数表达式是在代码运行阶段之前, 也就是代码解析阶段才赋值给标识符
    对第二种情况, 函数表达式是在函数运行阶段才赋值给变量

匿名函数的调用方式
使用()将匿名函数括起来，然后后面再加一对小括号（包含参数列表）
//方式1
//这种方式尽量少用
const sum1 = function(x, y){
    return x + y;
}(1, 2);

//方式2
//推荐
const sum = (function(x, y){
    return x + y;
})(1, 2);
console.log(sum1);

//方式3
(new Function("x","y","return x+y"))(1,2)

在javascript中，是没有块级作用域这种说法的，以上代码的这种方式就是模仿了块级作用域(通常成为私有作用域)，语法如下所示：
(function(){  
    //这里是块级作用域  
})();

在一个表达式后面加上括号()，该表达式会立即执行，但是在一个语句后面加上括号()，是完全不一样的意思，只是分组操作符。
function foo(){
   alert('测试是否弹窗')
}() 
// SyntaxError: Unexpected token ) 
// 报错因为分组操作符需要包含表达式

function foo(){ 
    alert('测试是否弹窗')
}(1) 
// (1) => 等价于 1
// 相当于foo方法后面个跟了一个无关系的表达式子:(1)

想要得到想要的弹窗提示，就必须要实现赋值
下面两段代码是等价的

var aa = function(x){  
    alert(x)  
}(5) //弹窗显示：5  

(function(x){
    alert(x)
})(5) //弹窗显示：5    



自执行匿名函数
自执行函数，即定义和调用合为一体。我们创建了一个匿名的函数，并立即执行它，由于外部无法引用它内部的变量，因此在执行完后很快就会被释放，关键是这种机制不会污染全局对象。
// 下面2个括弧()都会立即执行  
(function () { /* code */ } ()) // 推荐使用这个  
(function () { /* code */ })() // 但是这个也是可以用的  
  
// 由于括弧()和JS的&&，异或，逗号等操作符是在函数表达式和函数声明上消除歧义的  
// 所以一旦解析器知道其中一个已经是表达式了，其它的也都默认为表达式了  
var i = function () { return 10; } ();  
true && function () { /* code */ } ();  
0, function () { /* code */ } ();  
  
// 如果你不在意返回值，或者不怕难以阅读
// 你甚至可以在function前面加一元操作符号  
!function () { /* code */ } ();  
~function () { /* code */ } ();  
-function () { /* code */ } ();  
+function () { /* code */ } ();  
  
// 还有一个情况，使用new关键字,也可以用，但我不确定它的效率  
// http://twitter.com/kuvos/status/18209252090847232  
new function () { /* code */ }  
new function () { /* code */ } () // 如果需要传递参数，只需要加上括弧()  




  